options:
  parameters:
    author: Or Talisman
    category: TNC
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: hb
    hier_block_src_path: '.:'
    id: KISS_BLOCK
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: KISS Protocol
    window_size: ''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\nclass KISS:\n\tdef __init__(self):\n\t\tself.FEND\
      \ = 0xc0\n\t\tself.FESC = 0xdb\n\t\tself.TFEND = 0xdc\n\t\tself.TFESC = 0xdd\n\
      \n\tdef is_FEND(self, data_byte):\n\t\treturn data_byte == self.FEND\n\n\tdef\
      \ get_encoded_start(self):\n\t\treturn (self.FESC, self.TFEND)\n\n\tdef is_FESC(self,\
      \ data_byte):\n\t\treturn data_byte == self.FESC\n\n\nclass blk(gr.sync_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n    \"\"\
      \"Embedded Python Block example - a simple multiply const\"\"\"\n\n    def __init__(self):\
      \  # only default arguments here\n        \"\"\"arguments to this function show\
      \ up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n         \
      \   self,\n            name='KISS ENCODER',   # will show up in GRC\n      \
      \      in_sig=[np.byte],\n            out_sig=[np.byte]\n        )\n       \
      \ # if an attribute with the same name as a parameter is found,\n        # a\
      \ callback is registered (properties work, too).\n\n    def work(self, input_items,\
      \ output_items):\n        \"\"\"example: multiply with constant\"\"\"\n    \
      \    output_items[0][:] = input_items[0]\n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('KISS ENCODER', 'blk', [], [('0', 'byte', 1)], [('0', 'byte', 1)],
      'Embedded Python Block example - a simple multiply const', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [384, 227]
    rotation: 0
    state: true
- name: pad_sink_0
  id: pad_sink
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    label: out
    num_streams: '1'
    optional: 'False'
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [777, 223]
    rotation: 0
    state: true
- name: pad_source_0
  id: pad_source
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    label: in
    maxoutbuf: '0'
    minoutbuf: '0'
    num_streams: '1'
    optional: 'False'
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [48, 223]
    rotation: 0
    state: true

connections:
- [epy_block_0, '0', pad_sink_0, '0']
- [pad_source_0, '0', epy_block_0, '0']

metadata:
  file_format: 1
