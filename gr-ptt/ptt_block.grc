options:
  parameters:
    author: ''
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: ptt_block
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Not titled yet
    window_size: ''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: '32000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [184, 12]
    rotation: 0
    state: enabled
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport pyfirmata\nimport time\n\nfrom pyfirmata import\
      \ util\n\n\n\nboard = pyfirmata.Arduino('/dev/ttyACM0') #\"connects\" the board\
      \ to this code\n\nit = pyfirmata.util.Iterator(board)\nit.start()\n\nanalog_input\
      \ = board.get_pin('a:1:i')\ndigital_output = board.get_pin('d:13:o')\nled =\
      \ board.get_pin('d:11:p')\n\n\nclass blk(gr.sync_block):  # other base classes\
      \ are basic_block, decim_block, interp_block\n    \"\"\"Embedded Python Block\
      \ example - a simple multiply const\"\"\"\n    def __init__(self, example_param=1.0):\
      \  # only default arguments here\n        \"\"\"arguments to this function show\
      \ up as parameters in GRC\"\"\"\n\t\tgr.sync_block.__init__(self, name='Arduino\
      \ Try',   # will show up in GRC\n\t\tin_sig=[np.float32],\n        out_sig=[np.float32]\n\
      \        )\n        # if an attribute with the same name as a parameter is found,\n\
      \        # a callback is registered (properties work, too).\n\t\tself.example_param\
      \ = example_param\n\n\tdef work(self, input_items, output_items):\n        \"\
      \"\"example: multiply with constant\"\"\"\n\t\tif self.zeroInput(input_items):\n\
      \t\t\tled.write(1)\n\t\tprint(input_items[0])\n\t\tdigital_output.write(1)\n\
      \    \t#time.sleep(1)\n    \t#digital_output.write(0)\n    \t#time.sleep(1)\n\
      \t\ttime.sleep(0.01)\n\t\toutput_items[0][:] = input_items[0] * self.example_param\n\
      \t\treturn len(output_items[0])\n        \n        \n        \n\tdef zeroInput(self,\
      \ input_items):\n\t\tfor i in range(len(input_items[0])):\n\t\t\tif input_items[0][i]!=0:\n\
      \t\t\t\treturn False\n\t\treturn True\n\n\n\n\n\n    \n"
    affinity: ''
    alias: ''
    comment: ''
    example_param: '1.0'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Embedded Python Block', 'blk', [('example_param', '1.0')], [('0',
      'complex', 1)], [('0', 'complex', 1)], 'Embedded Python Block example - a simple
      multiply const', ['example_param'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [665, 438]
    rotation: 0
    state: true
connections: []

metadata:
  file_format: 1
